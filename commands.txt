General Git commands and uses

1. git init: only use for the first time only, if you run this command again it will reinitilize the repositary, which we don not want.
2. git add --a : all the changes will get staged. (committed)
3. git add first.txt: add only the file which you want is good. Do not add the files you are not sure of will work fine.
4. git status: to look at the status of the repository, track changes etc.
5. git log: see the changes time by person etc. all info.
6. git commmit -m "xxxx yyyyy" : see the commits and messages put (eg: bugs fixed etc)
7. rm -rf .git : Deletes the git content of the repository. No tracking of the repo from now. 
8. git diff: compares modified files with that of the staging area
9. git add -a -m "Direct commit": skips the staging part and commits directly, untrakcked files cannot be commited directly, we need to add that file first and then commit changes
10. git checkout -- first_rename.txt: rolls back to the previously committed file. Problematic if you have an information in the latest file and you did not commit that. Be careful!
11. git checkout -f: same as previous, but for all the files. Again, be very careful!
12. (i) git remote xx yy (take from github- from an existing repository, eg git remote add origin https://github.com/Abhinna-Sundar/git-learn.git): create a website where this repository exists.
    (ii) git remote (after you use the previous command): to see the remotes -- in this case it is origin
    (iii)git remote -v: see how to push and fetch the commits and files from repository
13. git config --global alias.st status/alisas.ci commit/alias.unstage "--staged --": add alias in github. So when you use git st- it means git status, similarly with ci = commit
Finally use git log to see the final stages.
14. git status xxxxyyy (keynumber- first few numbers only after putting gitlog): to go back in time to see the older version of the repo
15. git switch -c anyname: to make the older version as a separate branch (make sure that you are in that branch first by typing "git checkout xxxyyy" command)
16. git config --global --edit: go to git config file and edit your shortcuts.

SSH keys generate
1. ssh-keygen -t ed25519 -C "your_email@example.com": replace with my email ID
2. eval "$(ssh-agent -s)": ensure that SSH agent is running -- will get Agent pid xxxxx
3. 


Branching

1. git checkout -b develop: create a new branch and go to that branch also. 
2. git push origin bugfix: push the branch to the github repo
3. git push origin bugfix:mybugfix : to change the name of the branch

Always commit to the changes and then switch branches.

Github:

Cloning means to download the files from the repository on the internet and put it on your computer. Different people can do this on their own systems.

1. git clone https://xxxxx person1 : Person 1 downloading this repo on their system.
2. git push (if it shows error, thus use the command below the error to push it to the repository): Pushes the code into the repository.